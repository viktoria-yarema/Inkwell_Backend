name: Deploy to Cloud Run

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  PROJECT_ID: inkwell-447220
  SERVICE_NAME: inkwell-dev
  REGION: europe-west10
  REPOSITORY: inkwell-repo
  IMAGE_NAME: inkwell-dev

jobs:
  # Pre-deployment validation job
  validate:
    name: Validate Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Check code formatting
        run: yarn format:check

      - name: Run ESLint
        run: npx eslint src --ext .ts,.js --max-warnings 60

      - name: Build application
        run: yarn build

      - name: Verify build output
        run: |
          if [ ! -f "build/app.js" ]; then
            echo "‚ùå Build failed: app.js not found"
            exit 1
          fi
          echo "‚úÖ Build successful: app.js exists"

  # Docker build and test job
  docker-test:
    name: Test Docker Build
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for testing
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          load: true
          tags: test-image:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Start container in background
          docker run -d --name test-container -p 8080:8080 \
            -e NODE_ENV=test \
            -e JWT_SECRET=test-secret \
            -e DB_URI=mongodb://localhost:27017/test \
            test-image:latest

          # Wait for container to start
          sleep 10

          # Check if container is running
          if ! docker ps | grep test-container; then
            echo "‚ùå Container failed to start"
            docker logs test-container
            exit 1
          fi

          # Test health endpoint (with retries)
          for i in {1..5}; do
            if curl -f http://localhost:8080/health; then
              echo "‚úÖ Health check passed"
              break
            fi
            if [ $i -eq 5 ]; then
              echo "‚ùå Health check failed after 5 attempts"
              docker logs test-container
              exit 1
            fi
            sleep 5
          done

          # Cleanup
          docker stop test-container
          docker rm test-container

  # Main deployment job
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: [validate, docker-test]

    # Only deploy on pushes to main/master, not on PRs
    if: github.event_name == 'push'

    outputs:
      service-url: ${{ steps.deploy-service.outputs.service-url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Verify GCP authentication
        run: |
          gcloud auth list
          gcloud config get-value project

      - name: Configure Docker to use gcloud as credential helper
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Create Artifact Registry repository (if it doesn't exist)
        run: |
          gcloud artifacts repositories create $REPOSITORY \
            --repository-format=docker \
            --location=$REGION \
            --project=$PROJECT_ID || echo "Repository already exists"

      - name: Build Docker image with proper tagging
        run: |
          # Build with commit SHA and latest tags
          docker build --platform linux/amd64 \
            -t $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_NAME:latest \
            -t $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_NAME:$GITHUB_SHA \
            .

      - name: Push to Artifact Registry
        run: |
          docker push $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_NAME:latest
          docker push $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_NAME:$GITHUB_SHA

      - name: Deploy to Cloud Run
        id: deploy-service
        run: |
          # Deploy with the specific SHA tag for better tracking
          gcloud run deploy $SERVICE_NAME \
            --image $REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE_NAME:$GITHUB_SHA \
            --platform managed \
            --region $REGION \
            --allow-unauthenticated \
            --memory 512Mi \
            --cpu 1000m \
            --max-instances 10 \
            --min-instances 0 \
            --port 8080 \
            --timeout 300s \
            --concurrency 80 \
            --service-account="inkwell-bucket@$PROJECT_ID.iam.gserviceaccount.com" \
            --set-env-vars="NODE_ENV=production,GITHUB_SHA=$GITHUB_SHA" \
            --quiet

          # Get and output service URL
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format="value(status.url)")
          echo "service-url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "üöÄ Service deployed at: $SERVICE_URL"

  # Post-deployment verification job
  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push'

    steps:
      - name: Wait for service to be ready
        run: sleep 30

      - name: Comprehensive health check
        run: |
          SERVICE_URL="${{ needs.deploy.outputs.service-url }}"

          echo "üîç Testing service at: $SERVICE_URL"

          # Test health endpoint with retries
          for i in {1..10}; do
            echo "Attempt $i/10: Testing health endpoint..."
            
            if curl -f -s --max-time 30 "$SERVICE_URL/health" | grep -q "healthy\|ok"; then
              echo "‚úÖ Health check passed on attempt $i"
              HEALTH_SUCCESS=true
              break
            fi
            
            if [ $i -eq 10 ]; then
              echo "‚ùå Health check failed after 10 attempts"
              exit 1
            fi
            
            sleep 10
          done

      - name: Performance and security check
        run: |
          SERVICE_URL="${{ needs.deploy.outputs.service-url }}"

          # Test response time
          echo "üìä Testing response time..."
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "$SERVICE_URL/health")
          echo "Response time: ${RESPONSE_TIME}s"

          # Simple performance check without bc
          if python3 -c "print(float('$RESPONSE_TIME') > 5.0)" 2>/dev/null | grep -q True; then
            echo "‚ö†Ô∏è Warning: Response time is slow (${RESPONSE_TIME}s)"
          else
            echo "‚úÖ Response time is acceptable (${RESPONSE_TIME}s)"
          fi

          # Test HTTPS
          if [[ $SERVICE_URL == https://* ]]; then
            echo "‚úÖ HTTPS is properly configured"
          else
            echo "‚ö†Ô∏è Warning: Service is not using HTTPS"
          fi

      - name: Update deployment status
        run: |
          echo "‚úÖ Deployment verification completed successfully"
          echo "üåê Service URL: ${{ needs.deploy.outputs.service-url }}"
          echo "üîç Health endpoint: ${{ needs.deploy.outputs.service-url }}/health"
          echo "üìù Commit: $GITHUB_SHA"

  # Rollback job (manual trigger or on failure)
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy, verify-deployment]
    if: failure() && github.event_name == 'push'

    steps:
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Get previous revision
        id: get-previous
        run: |
          # Get the second most recent revision (previous working version)
          PREVIOUS_REVISION=$(gcloud run revisions list \
            --service=$SERVICE_NAME \
            --region=$REGION \
            --format="value(metadata.name)" \
            --limit=2 | tail -n 1)

          echo "previous-revision=$PREVIOUS_REVISION" >> $GITHUB_OUTPUT
          echo "Previous revision: $PREVIOUS_REVISION"

      - name: Rollback to previous version
        if: steps.get-previous.outputs.previous-revision != ''
        run: |
          echo "üîÑ Rolling back to previous revision: ${{ steps.get-previous.outputs.previous-revision }}"

          gcloud run services update-traffic $SERVICE_NAME \
            --region=$REGION \
            --to-revisions=${{ steps.get-previous.outputs.previous-revision }}=100

          echo "‚úÖ Rollback completed"

      - name: Verify rollback
        if: steps.get-previous.outputs.previous-revision != ''
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format="value(status.url)")

          # Wait and test health after rollback
          sleep 30
          if curl -f -s "$SERVICE_URL/health"; then
            echo "‚úÖ Rollback verification successful"
          else
            echo "‚ùå Rollback verification failed"
            exit 1
          fi

  # Notification job
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy, verify-deployment]
    if: always() && github.event_name == 'push'

    steps:
      - name: Deployment Success Notification
        if: needs.verify-deployment.result == 'success'
        run: |
          echo "üéâ Deployment Successful!"
          echo "Service: $SERVICE_NAME"
          echo "Region: $REGION"
          echo "URL: ${{ needs.deploy.outputs.service-url }}"
          echo "Commit: $GITHUB_SHA"
          echo "Author: ${{ github.actor }}"

      - name: Deployment Failure Notification
        if: needs.verify-deployment.result == 'failure' || needs.deploy.result == 'failure'
        run: |
          echo "üí• Deployment Failed!"
          echo "Service: $SERVICE_NAME"
          echo "Commit: $GITHUB_SHA"
          echo "Author: ${{ github.actor }}"
          echo "Check the logs for details."
          exit 1
